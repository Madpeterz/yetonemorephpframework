<?php

namespace YAPF\Generator;

class SingleModelFactory extends ModelFactoryShared
{

    protected function createRelatedLoaders(): void
    {
        $seenRelated = [];
        foreach ($this->links as $id => $entry) {
            $targetclass = ucfirst(strtolower($entry["target_table"]));
            $targetclassname =  $targetclass . "Set";
            if (in_array($targetclassname, $seenRelated) == true) {
                continue;
            }
            $seenRelated[] = $targetclassname;
            $this->file_lines[] = 'public function loadRelated' . $targetclass . '(): ' . $targetclassname . '';
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = '$ids = [$this->get' . ucfirst($entry["field_source"]) . '()];';
            $this->file_lines[] = '$collection = new ' . $targetclassname . '();';
            $this->file_lines[] = '$collection->loadFrom' . ucfirst($entry["field_target"]) . 's($ids);';
            $this->file_lines[] = 'return $collection;';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';
        }
    }

    protected function createModelFooter(): void
    {
        $this->file_lines[] = [0];
        $this->file_lines[] = '}';
        $this->file_lines[] = '// please do not edit this file';
    }

    protected function createModelSetters(): void
    {
        $this->file_lines[] = "// Setters";
        foreach ($this->cols as $row_two) {
            if ($row_two["COLUMN_NAME"] == "id") {
                continue;
            }
            $return_type_addon = "";
            $use_type = $this->getColType(
                $row_two["DATA_TYPE"],
                $row_two["COLUMN_TYPE"],
                $this->table,
                $row_two["COLUMN_NAME"]
            );
            if ($use_type == "str") {
                $use_type = "string";
            }
            $return_type_addon = "?" . $use_type . "";
            $this->file_lines[] = "/**";
            $this->file_lines[] = "* set" . ucfirst($row_two["COLUMN_NAME"]);
            $this->file_lines[] = "* @return mixed[] [status =>  bool, message =>  string]";
            $this->file_lines[] = "*/";
            $set_function = 'public function set' . ucfirst($row_two["COLUMN_NAME"]);
            $set_function .= '(' . $return_type_addon . ' $newvalue): array';
            $this->file_lines[] = $set_function;
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = 'return $this->updateField("' . $row_two["COLUMN_NAME"] . '", $newvalue);';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';
        }
    }

    protected function createModelLoaders(): void
    {
        $this->file_lines[] = "// Loaders";
        foreach ($this->cols as $row_two) {
            if ($row_two["COLUMN_NAME"] == "id") {
                continue;
            }
            $use_type = $this->getColType(
                $row_two["DATA_TYPE"],
                $row_two["COLUMN_TYPE"],
                $this->table,
                $row_two["COLUMN_NAME"]
            );
            if ($use_type == "str") {
                $use_type = "string";
            }
            $functionloadname = 'loadBy' . ucfirst($row_two["COLUMN_NAME"]);

            $this->file_lines[] = 'public function ' . $functionloadname . '('
            . $use_type . ' $' . $row_two["COLUMN_NAME"] . '): bool';
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = 'return $this->loadByField(';
            $this->file_lines[] = [3];
            $this->file_lines[] = '"' . $row_two["COLUMN_NAME"] . '",';
            $this->file_lines[] = '$' . $row_two["COLUMN_NAME"];
            $this->file_lines[] = [2];
            $this->file_lines[] =  ');';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';
        }
    }

    protected function createModelGetters(): void
    {
        $this->file_lines[] = "// Getters";
        foreach ($this->cols as $row_two) {
            if ($row_two["COLUMN_NAME"] != "id") {
                $return_type_addon = "";
                $use_type = $this->getColType(
                    $row_two["DATA_TYPE"],
                    $row_two["COLUMN_TYPE"],
                    $this->table,
                    $row_two["COLUMN_NAME"]
                );
                if ($use_type == "str") {
                    $use_type = "string";
                }
                $return_type_addon = ": ?" . $use_type . "";
                $get_function = 'public function get' . ucfirst($row_two["COLUMN_NAME"]);
                $get_function .= '()' . $return_type_addon;
                $this->file_lines[] = $get_function;
                $this->file_lines[] = '{';
                $this->file_lines[] = [2];
                $this->file_lines[] = 'return $this->getField("' . $row_two["COLUMN_NAME"] . '");';
                $this->file_lines[] = [1];
                $this->file_lines[] = '}';
            }
        }
    }

    protected function createModelDataset(): void
    {
        $this->file_lines[] = "// Data Design";
        $this->file_lines[] = 'protected $fields = [';
        $this->file_lines[] = [2];
        foreach ($this->cols as $row_two) {
            $this->file_lines[] = '"' . $row_two["COLUMN_NAME"] . '",';
        }
        $this->file_lines[] = [1];
        $this->file_lines[] = '];';
        $this->file_lines[] = 'protected $dataset = [';
        $this->file_lines[] = [2];
        foreach ($this->cols as $row_two) {
            $use_type = $this->getColType(
                $row_two["DATA_TYPE"],
                $row_two["COLUMN_TYPE"],
                $this->table,
                $row_two["COLUMN_NAME"]
            );
            $detected_default = $row_two["COLUMN_DEFAULT"];
            if (($row_two["COLUMN_DEFAULT"] == null) || ($row_two["COLUMN_DEFAULT"] == "NULL")) {
                $detected_default = "null";
            }
            if ($use_type == "str") {
                $detected_default = str_replace("'", "", $detected_default);
                if ((strlen($detected_default) > 0) && ($detected_default !== "null")) {
                    if (strpos($detected_default, '"') === false) {
                        $detected_default = '"' . $detected_default . '"';
                    }
                }
                if ($detected_default == "") {
                    $detected_default = "\'\'";
                }
            }
            $line = '"' . $row_two["COLUMN_NAME"] . '" => ["type" => "';
            $line .= $use_type . '", "value" => ' . $detected_default . '],';
            $this->file_lines[] = $line;
        }
        $this->file_lines[] = [1];
        $this->file_lines[] = '];';
    }

    protected function createModelHeader(): void
    {
        $add_target_db_to_class = "";
        if ($this->addDbToTable == true) {
            $add_target_db_to_class = $this->database . ".";
        }
        $this->file_lines[] = '<?php';
        $this->file_lines[] = '';
        $this->file_lines[] = 'namespace ' . $this->namespaceSingle . ';';
        $this->file_lines[] = '';
        $this->file_lines[] = 'use YAPF\DbObjects\GenClass\GenClass as GenClass;';
        foreach ($this->headerPatcher as $patch) {
            $this->file_lines[] = 'use ' . $this->namespaceSet . '\\' . $patch . ' as ' . $patch . ';';
        }
        $this->file_lines[] = '';
        $this->file_lines[] = '// Do not edit this file, rerun gen.php to update!';
        $this->file_lines[] = 'class ' . $this->classname . ' extends genClass';
        $this->file_lines[] = '{';
        $this->file_lines[] = [1];
        $this->file_lines[] = 'protected $use_table = "' . $add_target_db_to_class . '' . $this->table . '";';
    }
}
