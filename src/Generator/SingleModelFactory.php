<?php

namespace YAPF\Framework\Generator;

class SingleModelFactory extends ModelFactoryShared
{
    public function getRelatedCounter(): int
    {
        return count($this->seenRelated);
    }
    protected array $seenRelated = [];
    protected function createRelatedLoaders(): void
    {
        $this->seenRelated = [];
        foreach ($this->links as $entry) {
            $targetClass = "";
            $fromField = "";
            $loadField = "";
            if ($entry["source_table"] == $this->table) {
                $targetClass = ucfirst(strtolower($entry["target_table"]));
                $fromField = ucfirst($entry["source_field"]);
                $loadField = ucfirst($entry["targetField"]);
            } elseif ($entry["target_table"] == $this->table) {
                $targetClass = ucfirst(strtolower($entry["source_table"]));
                $fromField = ucfirst($entry["targetField"]);
                $loadField = ucfirst($entry["source_field"]);
            }
            if ($targetClass == "") {
                continue;
            }

            $targetClassName =  $targetClass . "Set";
            if (in_array($targetClassName, $this->seenRelated) == true) {
                continue;
            }

            $this->seenRelated[] = $targetClassName;



            $this->fileLines[] = 'public function related' . $targetClass . '(?array $limitFields=null): '
                . $targetClassName . '';
            $this->fileLines[] = '{';
            $this->fileLines[] = [2];
            $this->fileLines[] = '$ids = [$this->get' . $fromField . '()];';
            $this->fileLines[] = '$collection = new ' . $targetClassName . '();';
            $this->fileLines[] = 'if($limitFields !== null) {';
            $this->fileLines[] = [3];
            $this->fileLines[] = '$collection->limitFields($limitFields);';
            $this->fileLines[] = [2];
            $this->fileLines[] = '}';
            $this->fileLines[] = '$collection->loadFrom' . $loadField . 's($ids);';
            $this->fileLines[] = 'return $collection;';
            $this->fileLines[] = [1];
            $this->fileLines[] = '}';
        }
    }

    protected function createModelFooter(): void
    {
        $this->fileLines[] = [0];
        $this->fileLines[] = '}';
        $this->fileLines[] = '// please do not edit this file';
    }

    protected function createModelSetters(): void
    {
        $this->fileLines[] = "// Setters";
        foreach ($this->cols as $rowTwo) {
            if ($rowTwo["COLUMN_NAME"] == "id") {
                continue;
            }
            $returnType = "";
            $useType = $this->getColType(
                $rowTwo["DATA_TYPE"],
                $rowTwo["COLUMN_TYPE"],
                $this->table,
                $rowTwo["COLUMN_NAME"]
            );
            if ($useType == "str") {
                $useType = "string";
            }
            $returnType = "?" . $useType . "";
            $this->fileLines[] = "/**";
            $this->fileLines[] = "* set" . ucfirst($rowTwo["COLUMN_NAME"]);
            $this->fileLines[] = "*/";
            $set_function = 'public function set' . ucfirst($rowTwo["COLUMN_NAME"]);
            $set_function .= '(' . $returnType . ' $newValue): UpdateReply';
            $this->fileLines[] = $set_function;
            $this->fileLines[] = '{';
            $this->fileLines[] = [2];
            $this->fileLines[] = 'return $this->updateField("' . $rowTwo["COLUMN_NAME"] . '", $newValue);';
            $this->fileLines[] = [1];
            $this->fileLines[] = '}';
        }
    }

    protected function createModelLoaders(): void
    {
        $this->fileLines[] = "// Loaders";
        foreach ($this->cols as $rowTwo) {
            if ($rowTwo["COLUMN_NAME"] == "id") {
                continue;
            }
            $useType = $this->getColType(
                $rowTwo["DATA_TYPE"],
                $rowTwo["COLUMN_TYPE"],
                $this->table,
                $rowTwo["COLUMN_NAME"]
            );
            if ($useType == "str") {
                $useType = "string";
            }
            $functionLoadName = 'loadBy' . ucfirst($rowTwo["COLUMN_NAME"]);

            $this->fileLines[] = 'public function ' . $functionLoadName . '('
                . $useType . ' $' . $rowTwo["COLUMN_NAME"] . '): SingleLoadReply';
            $this->fileLines[] = '{';
            $this->fileLines[] = [2];
            $this->fileLines[] = 'return $this->loadByField(';
            $this->fileLines[] = [3];
            $this->fileLines[] = '"' . $rowTwo["COLUMN_NAME"] . '",';
            $this->fileLines[] = '$' . $rowTwo["COLUMN_NAME"];
            $this->fileLines[] = [2];
            $this->fileLines[] =  ');';
            $this->fileLines[] = [1];
            $this->fileLines[] = '}';
        }
    }

    protected function createModelGetters(): void
    {
        $this->fileLines[] = "// Getters";
        foreach ($this->cols as $rowTwo) {
            if ($rowTwo["COLUMN_NAME"] != "id") {
                $returnType = "";
                $useType = $this->getColType(
                    $rowTwo["DATA_TYPE"],
                    $rowTwo["COLUMN_TYPE"],
                    $this->table,
                    $rowTwo["COLUMN_NAME"]
                );
                if ($useType == "str") {
                    $useType = "string";
                }
                $returnType = ": ?" . $useType . "";
                $getFunction = 'public function get' . ucfirst($rowTwo["COLUMN_NAME"]);
                $getFunction .= '()' . $returnType;
                $this->fileLines[] = $getFunction;
                $this->fileLines[] = '{';
                $this->fileLines[] = [2];
                $this->fileLines[] = 'return $this->getField("' . $rowTwo["COLUMN_NAME"] . '");';
                $this->fileLines[] = [1];
                $this->fileLines[] = '}';
            }
        }
    }

    protected function createModelDataset(): void
    {
        $this->fileLines[] = "// Data Design";
        $this->fileLines[] = 'protected $fields = [';
        $this->fileLines[] = [2];
        foreach ($this->cols as $rowTwo) {
            $this->fileLines[] = '"' . $rowTwo["COLUMN_NAME"] . '",';
        }
        $this->fileLines[] = [1];
        $this->fileLines[] = '];';
        $this->fileLines[] = 'protected $dataset = [';
        $this->fileLines[] = [2];
        foreach ($this->cols as $rowTwo) {
            $useType = $this->getColType(
                $rowTwo["DATA_TYPE"],
                $rowTwo["COLUMN_TYPE"],
                $this->table,
                $rowTwo["COLUMN_NAME"]
            );
            $detected_default = $rowTwo["COLUMN_DEFAULT"];
            if (($rowTwo["COLUMN_DEFAULT"] == null) || ($rowTwo["COLUMN_DEFAULT"] == "NULL")) {
                $detected_default = "null";
            }
            if ($useType == "str") {
                $detected_default = str_replace("'", "", $detected_default);
                if ((strlen($detected_default) > 0) && ($detected_default !== "null")) {
                    if (strpos($detected_default, '"') === false) {
                        $detected_default = '"' . $detected_default . '"';
                    }
                }
                if ($detected_default == "") {
                    $detected_default = "\'\'";
                }
            }
            $line = '"' . $rowTwo["COLUMN_NAME"] . '" => ["type" => "';
            $line .= $useType . '", "value" => ' . $detected_default . '],';
            $this->fileLines[] = $line;
        }
        $this->fileLines[] = [1];
        $this->fileLines[] = '];';
    }

    protected function createModelHeader(): void
    {
        $dbNameAddon = "";
        if ($this->addDbToTable == true) {
            $dbNameAddon = $this->database . ".";
        }
        $this->fileLines[] = '<?php';
        $this->fileLines[] = '';
        $this->fileLines[] = 'namespace ' . $this->namespaceSingle . ';';
        $this->fileLines[] = '';
        $this->fileLines[] = 'use YAPF\Framework\DbObjects\GenClass\GenClass as GenClass;';
        $this->fileLines[] = 'use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;';
        $this->fileLines[] = 'use YAPF\Framework\Responses\DbObjects\SingleLoadReply as SingleLoadReply;';
        ;

        $seenUsing = [];
        foreach ($this->links as $entry) {
            $targetClass = "";
            if ($entry["source_table"] == $this->table) {
                $targetClass = ucfirst(strtolower($entry["target_table"]));
            } elseif ($entry["target_table"] == $this->table) {
                $targetClass = ucfirst(strtolower($entry["source_table"]));
            }
            if ($targetClass == "") {
                continue;
            }

            $targetClassName =  $targetClass . "Set";
            if (in_array($targetClassName, $seenUsing) == true) {
                continue;
            }
            $seenUsing[] = $targetClassName;
            $this->fileLines[] = 'use ' . $this->namespaceSet . '\\'
                . $targetClassName . ' as ' . $targetClassName . ';';
        }

        $this->fileLines[] = '';
        $this->fileLines[] = '// Do not edit this file, rerun gen.php to update!';
        $this->fileLines[] = 'class ' . $this->className . ' extends genClass';
        $this->fileLines[] = '{';
        $this->fileLines[] = [1];
        $this->fileLines[] = 'protected $use_table = "' . $dbNameAddon . '' . $this->table . '";';
    }
}
