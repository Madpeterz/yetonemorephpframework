<?php

namespace YAPF\Junk\Sets;

use YAPF\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use YAPF\Junk\Models\Schoolassignments as Schoolassignments;

// Do not edit this file, rerun gen.php to update!
class SchoolassignmentsSet extends CollectionSet
{
	public function __construct()
	{
		parent::__construct("YAPF\Junk\Models\Schoolassignments");
	}
	/**
	 * getObjectByID
	 * returns a object that matchs the selected id
	 * returns null if not found
	 * Note: Does not support bad Ids please use findObjectByField
	 */
	public function getObjectByID($id): ?Schoolassignments
	{
		return parent::getObjectByID($id);
	}
	/**
	 * getFirst
	 * returns the first object in a collection
	 */
	public function getFirst(): ?Schoolassignments
	{
		return parent::getFirst();
	}
	/**
	 * getObjectByField
	 * returns the first object in a collection that matchs the field and value checks
	 */
	public function getObjectByField(string $fieldname, $value): ?Schoolassignments
	{
		return parent::getObjectByField($fieldname, $value);
	}
	/**
	 * current
	 * used by foreach to get the object should not be called directly
	 */
	public function current(): Schoolassignments
	{
		return parent::current();
	}
	/**
	 * uniqueIds
	 * returns unique values from the collection matching that field
	 * @return array<int>
	 */
	public function uniqueIds(): array
	{
		return parent::uniqueArray("id");
	}
	/**
	 * uniqueUids
	 * returns unique values from the collection matching that field
	 * @return array<string>
	 */
	public function uniqueUids(): array
	{
		return parent::uniqueArray("uid");
	}
	/**
	 * uniqueUserLinks
	 * returns unique values from the collection matching that field
	 * @return array<int>
	 */
	public function uniqueUserLinks(): array
	{
		return parent::uniqueArray("userLink");
	}
	/**
	 * uniqueSchoolLinks
	 * returns unique values from the collection matching that field
	 * @return array<int>
	 */
	public function uniqueSchoolLinks(): array
	{
		return parent::uniqueArray("schoolLink");
	}
	/**
	 * uniqueIsOwners
	 * returns unique values from the collection matching that field
	 * @return array<bool>
	 */
	public function uniqueIsOwners(): array
	{
		return parent::uniqueArray("isOwner");
	}
	// Loaders
	/**
	 * loadById
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadById(
		int $id, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"id", 
			$id, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromIds
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromIds(array $values): array
	{
		return $this->loadIndexs("id", $values);
	}
	/**
	 * loadByUid
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByUid(
		string $uid, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"uid", 
			$uid, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromUids
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromUids(array $values): array
	{
		return $this->loadIndexs("uid", $values);
	}
	/**
	 * loadByUserLink
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByUserLink(
		int $userLink, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"userLink", 
			$userLink, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromUserLinks
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromUserLinks(array $values): array
	{
		return $this->loadIndexs("userLink", $values);
	}
	/**
	 * loadBySchoolLink
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadBySchoolLink(
		int $schoolLink, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"schoolLink", 
			$schoolLink, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromSchoolLinks
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromSchoolLinks(array $values): array
	{
		return $this->loadIndexs("schoolLink", $values);
	}
	/**
	 * loadByIsOwner
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByIsOwner(
		bool $isOwner, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"isOwner", 
			$isOwner, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromIsOwners
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromIsOwners(array $values): array
	{
		return $this->loadIndexs("isOwner", $values);
	}
	// Related loaders
	public function relatedSchools(): SchoolsSet
	{
		$ids = $this->uniqueSchoolLinks();
		$collection = new SchoolsSet();
		$collection->loadFromIds($ids);
		return $collection;
	}
	public function relatedUsers(): UsersSet
	{
		$ids = $this->uniqueUserLinks();
		$collection = new UsersSet();
		$collection->loadFromIds($ids);
		return $collection;
	}
}
