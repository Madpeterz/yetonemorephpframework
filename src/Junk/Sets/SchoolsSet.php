<?php

namespace YAPF\Junk\Sets;

use YAPF\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use YAPF\Junk\Models\Schools as Schools;

// Do not edit this file, rerun gen.php to update!
class SchoolsSet extends CollectionSet
{
	public function __construct()
	{
		parent::__construct("YAPF\Junk\Models\Schools");
	}
	/**
	 * getObjectByID
	 * returns a object that matchs the selected id
	 * returns null if not found
	 * Note: Does not support bad Ids please use findObjectByField
	 */
	public function getObjectByID($id): ?Schools
	{
		return parent::getObjectByID($id);
	}
	/**
	 * getFirst
	 * returns the first object in a collection
	 */
	public function getFirst(): ?Schools
	{
		return parent::getFirst();
	}
	/**
	 * getObjectByField
	 * returns the first object in a collection that matchs the field and value checks
	 */
	public function getObjectByField(string $fieldname, $value): ?Schools
	{
		return parent::getObjectByField($fieldname, $value);
	}
	/**
	 * current
	 * used by foreach to get the object should not be called directly
	 */
	public function current(): Schools
	{
		return parent::current();
	}
	/**
	 * uniqueIds
	 * returns unique values from the collection matching that field
	 * @return array<int>
	 */
	public function uniqueIds(): array
	{
		return parent::uniqueArray("id");
	}
	/**
	 * uniqueUIDs
	 * returns unique values from the collection matching that field
	 * @return array<string>
	 */
	public function uniqueUIDs(): array
	{
		return parent::uniqueArray("UID");
	}
	/**
	 * uniqueNames
	 * returns unique values from the collection matching that field
	 * @return array<string>
	 */
	public function uniqueNames(): array
	{
		return parent::uniqueArray("name");
	}
	/**
	 * uniqueDisableds
	 * returns unique values from the collection matching that field
	 * @return array<bool>
	 */
	public function uniqueDisableds(): array
	{
		return parent::uniqueArray("disabled");
	}
	/**
	 * uniqueTourURLs
	 * returns unique values from the collection matching that field
	 * @return array<string>
	 */
	public function uniqueTourURLs(): array
	{
		return parent::uniqueArray("tourURL");
	}
	/**
	 * uniqueEmailAddresss
	 * returns unique values from the collection matching that field
	 * @return array<string>
	 */
	public function uniqueEmailAddresss(): array
	{
		return parent::uniqueArray("emailAddress");
	}
	// Loaders
	/**
	 * loadById
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadById(
		int $id, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"id", 
			$id, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromIds
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromIds(array $values): array
	{
		return $this->loadIndexs("id", $values);
	}
	/**
	 * loadByUID
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByUID(
		string $UID, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"UID", 
			$UID, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromUIDs
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromUIDs(array $values): array
	{
		return $this->loadIndexs("UID", $values);
	}
	/**
	 * loadByName
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByName(
		string $name, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"name", 
			$name, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromNames
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromNames(array $values): array
	{
		return $this->loadIndexs("name", $values);
	}
	/**
	 * loadByDisabled
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByDisabled(
		bool $disabled, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"disabled", 
			$disabled, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromDisableds
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromDisableds(array $values): array
	{
		return $this->loadIndexs("disabled", $values);
	}
	/**
	 * loadByTourURL
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByTourURL(
		string $tourURL, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"tourURL", 
			$tourURL, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromTourURLs
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromTourURLs(array $values): array
	{
		return $this->loadIndexs("tourURL", $values);
	}
	/**
	 * loadByEmailAddress
	 * @return mixed[] [status =>  bool, count => integer, message =>  string]
	*/
	public function loadByEmailAddress(
		string $emailAddress, 
		int $limit = 0, 
		string $orderBy = "id", 
		string $orderDir = "DESC"
	): array
	{
		return $this->loadByField(
			"emailAddress", 
			$emailAddress, 
			$limit, 
			$orderBy, 
			$orderDir
		);
	}
	/**
	 * loadFromEmailAddresss
	 * @return array<mixed> [status =>  bool, count => integer, message =>  string]
	*/
	public function loadFromEmailAddresss(array $values): array
	{
		return $this->loadIndexs("emailAddress", $values);
	}
	// Related loaders
	public function relatedSchoolassignments(): SchoolassignmentsSet
	{
		$ids = $this->uniqueIds();
		$collection = new SchoolassignmentsSet();
		$collection->loadFromSchoolLinks($ids);
		return $collection;
	}
	public function relatedSchoolmaps(): SchoolmapsSet
	{
		$ids = $this->uniqueIds();
		$collection = new SchoolmapsSet();
		$collection->loadFromSchoolLinks($ids);
		return $collection;
	}
	public function relatedSchoolpendingcontact(): SchoolpendingcontactSet
	{
		$ids = $this->uniqueIds();
		$collection = new SchoolpendingcontactSet();
		$collection->loadFromSchoolLinks($ids);
		return $collection;
	}
	public function relatedSchoolvideos(): SchoolvideosSet
	{
		$ids = $this->uniqueIds();
		$collection = new SchoolvideosSet();
		$collection->loadFromSchoolLinks($ids);
		return $collection;
	}
	public function relatedSchoolviews(): SchoolviewsSet
	{
		$ids = $this->uniqueIds();
		$collection = new SchoolviewsSet();
		$collection->loadFromSchoolLinks($ids);
		return $collection;
	}
}
