<?php

namespace YAPF\Junk\Sets;

use YAPF\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use YAPF\Junk\Models\Relationtestingb as Relationtestingb;

// Do not edit this file, rerun gen.php to update!
class RelationtestingbSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("YAPF\Junk\Models\Relationtestingb");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Relationtestingb
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Relationtestingb
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Relationtestingb
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Relationtestingb
    {
        return parent::current();
    }
    /**
     * getUniqueExtended1s
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function getUniqueExtended1s(): array
    {
        return parent::getUniqueArray("extended1");
    }
    /**
     * getUniqueExtended2s
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function getUniqueExtended2s(): array
    {
        return parent::getUniqueArray("extended2");
    }
    /**
     * getUniqueExtended3s
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function getUniqueExtended3s(): array
    {
        return parent::getUniqueArray("extended3");
    }
    // Loaders
    /**
     * loadById
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadById(
        int $id, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "id", 
            $id, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromIds
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromIds(array $values): array
    {
        return $this->loadIndexs("id", $values);
    }
    /**
     * loadByExtended1
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByExtended1(
        string $extended1, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "extended1", 
            $extended1, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromExtended1s
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromExtended1s(array $values): array
    {
        return $this->loadIndexs("extended1", $values);
    }
    /**
     * loadByExtended2
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByExtended2(
        string $extended2, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "extended2", 
            $extended2, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromExtended2s
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromExtended2s(array $values): array
    {
        return $this->loadIndexs("extended2", $values);
    }
    /**
     * loadByExtended3
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByExtended3(
        string $extended3, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "extended3", 
            $extended3, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromExtended3s
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromExtended3s(array $values): array
    {
        return $this->loadIndexs("extended3", $values);
    }
    // Related loaders
}
