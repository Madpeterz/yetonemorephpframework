<?php

function get_col_type(string $target_type, string $col_type, string $table = "", string $colname = "", bool $add_warnings = false): string
{
    global $warnings;
    $detected_type = "str";
    $string_types = ["varchar","text","char","longtext","mediumtext","tinytext","date","datetime"];
    $int_types = ["int","smallint","bigint","mediumint","enum","timestamp"];
    $float_types = ["decimal","float","double"];
    if (in_array($target_type, $int_types)) {
        $detected_type = "int";
    } elseif (in_array($target_type, $string_types)) {
        $detected_type = "str";
    } elseif (in_array($target_type, $float_types)) {
        $detected_type = "float";
    } elseif ($target_type == "tinyint") {
        if (strpos($col_type, 'tinyint(1)') !== false) {
            $detected_type = "bool";
        } else {
            $detected_type = "int";
        }
    } else {
        $warnings[] = "Table: " . $table . " Column: " . $colname . " unknown type: " . $target_type . " defaulting to string!<br/>";
    }
    return $detected_type;
}

$tab_lookup = [0 => "",1 => "\t",2 => "\t\t",3 => "\t\t\t"]; // change to space if you want you monster
foreach (source_databases as $gen_database_name) {
    $sql->dbName = $gen_database_name;
    $add_target_db_to_class = "";
    if (add_db_to_table == true) {
        $add_target_db_to_class = "" . $gen_database_name . ".";
    }
    $fields = ["TABLE_NAME"];
    $wherefields = [["TABLE_SCHEMA" => "="]];
    $wherevalues = [[$gen_database_name => "s"]];
    $data = $sql->select("information_schema.tables", $fields, $wherefields, $wherevalues);
    if ($data["status"] == true) {
        foreach ($data["dataSet"] as $row) {
            $create_file = "" . save_models_to_folder . "" . $row["TABLE_NAME"] . ".php";
            $fields = ["COLUMN_NAME","COLUMN_DEFAULT","DATA_TYPE","COLUMN_TYPE"];
            $wherefields = [["TABLE_SCHEMA" => "="],["TABLE_NAME" => "="]];
            $wherevalues = [[$gen_database_name => "s"],[$row["TABLE_NAME"] => "s"]];
            $data_two = $sql->select("information_schema.columns", $fields, $wherefields, $wherevalues);
            echo "Starting file: " . $create_file . " -";
            if ($data_two["status"] == true) {
                $warnings = [];
                $found_id = false;

                $class_name = strtolower($row["TABLE_NAME"]);
                $file_lines = [
                '<?php',
                    [1],
                    '// Do not edit this file, rerun gen.php to update!',
                    'class ' . $class_name . '_set extends collectionSet { }',
                    '',
                    'class ' . $class_name . ' extends genClass',
                    '{',
                    [2],
                        'protected $use_table = "' . $add_target_db_to_class . '' . $row["TABLE_NAME"] . '";',
                        'protected $dataset = array(',
                        [3]
                ];

                // FK data
                /*
                $fields = array("ID","FOR_NAME","REF_NAME");
                $wherefields = array(array("FOR_NAME" => "="));
                $wherevalues = array(array("".$gen_database_name."/".$class_name."" => "s"));
                $data_fk = $sql->select("information_schema.innodb_sys_foreign",$fields,$wherefields,$wherevalues);
                $fk_fields = array();
                if($data_fk["status"] == true)
                {
                    foreach($data_fk as $fk_row)
                    {
                        $fk_data_loader = array()
                    }
                }
                */

                foreach ($data_two["dataSet"] as $row_two) {
                    $use_type = get_col_type($row_two["DATA_TYPE"], $row_two["COLUMN_TYPE"], $row["TABLE_NAME"], $row_two["COLUMN_NAME"], true);
                    $detected_default = "";
                    if (($row_two["COLUMN_DEFAULT"] == null) || ($row_two["COLUMN_DEFAULT"] == "NULL")) {
                        $detected_default = "null";
                    } else {
                        $detected_default = $row_two["COLUMN_DEFAULT"];
                    }
                    if ($use_type == "str") {
                        if ($detected_default != "null") {
                            $file_lines[] = '"' . $row_two["COLUMN_NAME"] . '" => array("type"=>"' . $use_type . '","value"=>"' . $detected_default . '"),';
                        } else {
                            $file_lines[] = '"' . $row_two["COLUMN_NAME"] . '" => array("type"=>"' . $use_type . '","value"=>' . $detected_default . '),';
                        }
                    } else {
                        $file_lines[] = '"' . $row_two["COLUMN_NAME"] . '" => array("type"=>"' . $use_type . '","value"=>' . $detected_default . '),';
                    }
                }
                $file_lines[] = [2];
                $file_lines[] = ');';
                foreach ($data_two["dataSet"] as $row_two) {
                    if ($row_two["COLUMN_NAME"] != "id") {
                        $return_type_addon = "";
                        $use_type = get_col_type($row_two["DATA_TYPE"], $row_two["COLUMN_TYPE"]);
                        if ($use_type == "float") {
                            $use_type = "double";
                        } elseif ($use_type == "str") {
                            $use_type = "string";
                        }
                        $return_type_addon = ": ?" . $use_type . "";
                        $get_function = 'public function get_' . $row_two["COLUMN_NAME"] . '() ' . $return_type_addon . '';
                        $get_function .= ' { ';
                        $get_function .= ' return $this->get_field("' . $row_two["COLUMN_NAME"] . '"); ';
                        $get_function .= ' } ';
                        $file_lines[] .= $get_function;
                    }
                }
                foreach ($data_two["dataSet"] as $row_two) {
                    if ($row_two["COLUMN_NAME"] != "id") {
                        $return_type_addon = "";
                        $use_type = get_col_type($row_two["DATA_TYPE"], $row_two["COLUMN_TYPE"]);
                        if ($use_type == "float") {
                            $use_type = "double";
                        } elseif ($use_type == "str") {
                            $use_type = "string";
                        }
                        $return_type_addon = "?" . $use_type . "";
                        $set_function = 'public function set_' . $row_two["COLUMN_NAME"] . '(' . $return_type_addon . ' $newvalue) : array';
                        $set_function .= ' { ';
                        $set_function .= ' return $this->update_field("' . $row_two["COLUMN_NAME"] . '",$newvalue); ';
                        $set_function .= ' } ';
                        $file_lines[] .= $set_function;
                    }
                }
                $file_lines[] = [1];
                $file_lines[] = '}';




                $file_lines[] = [0];
                $file_lines[] = '?>';
                if (file_exists($create_file)) {
                    unlink($create_file);
                }
                $file_content = "";
                $tabs = 0;

                foreach ($file_lines as $line_data) {
                    if (is_array($line_data) == false) {
                        if ($file_content != "") {
                            $file_content .= "\n\r";
                        }
                        $file_content .= $tab_lookup[$tabs];
                        $file_content .= $line_data;
                    } else {
                        $tabs = $line_data[0];
                    }
                }
                file_put_contents($create_file, $file_content);
                echo "<font color=\"#22CC22\">[DONE]</font> <Br/>";
                if (count($warnings) > 0) {
                    foreach ($warnings as $ohfuck) {
                        echo "Issue: " . $ohfuck . "<br/>";
                    }
                }
            } else {
                echo "<font color=\"#FF0000\">ERROR</font> " . $data_two["message"] . "<br/>";
            }
        }
    }
}
